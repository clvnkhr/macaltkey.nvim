================================================================================
                                                              *macaltkey.nvim*

A simple plug-in to make setting alt/option keybinds easier. 

In some terminals (e.g. iTerm2, wezTerm), it is possible to set a keybind for
option-a as follows:

    vim.keymap.set("n", "å", {mapping}, {opts})

When you have many of these, it is hard to read the configs. This plugin
allows you to write the following:

    local mak = require"macaltkey"
    mak.keymap.set("n", "<a-a>", {mapping}, {opts}, {opts2})

{opts2} can hold additional options that override those in mak.setup.
This is implemented as a dict with a simple wrapper around vim.keymap.set. 
We implement the following convenience functions

    mak.keymap.set
    mak.keymap.del
    mak.nvim_set_keymap
    mak.nvim_buf_set_keymap
    mak.nvim_del_keymap
    mak.nvim_buf_del_keymap
    mak.convert (see setup options below)

These commands will transparently pass to the wrapped api function if Mac OS
is not detected, or if there are no commands like <a-.> detected. 

If you previously wrote 

	local set = vim.keymap.set 

you can now simply write

	local set = mak.keymap.set

One can also manually convert the lhs:

    local mak = require"macaltkey"
    vim.keymap.set("n", mak.convert("<a-a>"), {mapping}, {opts}, {opts2})

This can be useful in calling keybinds in other places (e.g. plugin setup of
Lazy.nvim)

                                                           *macaltkey.setup*
Default setup with Lazy.nvim:

require("lazy").setup({
    {
        "clvnkhr/macaltkey.nvim",
        config = function()
            require "macaltkey".setup()
        end
    }
})

Setup options with Lazy.nvim:

require("lazy").setup({
    {
        "clvnkhr/macaltkey.nvim",

        config = function()
            require"macaltkey".setup({
            language = "en-US", -- American
            -- or "en-GB" British. US is default

            modifier = 'a',
            -- If this is e.g. 'y', then 
            -- will convert <y-x> to the character at option-x.
            -- Can be passed to the extra opts table of the 
            -- convenience functions.

            double_set = false,
            -- If this is true, then will set both the converted
            -- and unconverted keybind, e.g. both <a-a> and å.
            -- Can be passed to the extra opts table of the 
            -- convenience functions.
            })

            -- I don't recommend it, but you can put
            -- require"macaltkey".os = "darwin" here to force conversions.
            -- require"macaltkey".dict = {...} here to use a custom dict.

        end
    }
})

                                                         *macaltkey.convert()*
macaltkey.convert ({lhs}, {modifier}, {replacer})

    goes through the string lhs and replaces <a-x> keys with the value in the
    dict. the {a} in <a-x> is not case-sensitive and can be replaced by any
    character in the optional {modifier} field. This uses string.gsub, and the optional {replacer} field allows you to pass your own funciton to string.gsub.

    Note that we have to treat some characters differently since Lua 5.1 does
    not treat utf8 chars as a single character.

    For example, with the 'en-GB' keyboard layout:
>
    macaltkey.convert("hello <a-a><a-£><A-s><leader>") == "hello å‹ß<leader>"
<

                                                      *macaltkey.keymap.set()*
macaltkey.keymap.set ({mode}, {lhs}, {rhs}, {opts}, {opts2})
    
    convenience function wrapping the built-in function

        vim.keymap.set ({mode}, {lhs}, {rhs}, {opts}).
    
    {opts2} holds macaltkey-specific options that can override settings from
    setup ({double_set}, {modifier}). 
    - {modifier} is passed to the above macaltkey.convert.
    - {double_set = true} will call vim.keymap.set twice, once with {lhs} 
      and once more with {macaltkey.convert("lhs")}. 

                                                      *macaltkey.keymap.del()*
macaltkey.keymap.del ({mode}, {lhs}, {opts}, {opts2})
    
    Similarly to macaltkey.keymap.set, this wraps vim.keymap.del. {opts2} is
    for macaltkey-specific options.

                                                 *macaltkey.nvim_set_keymap()*
macaltkey.nvim_set_keymap ({mode}, {lhs}, {rhs}, {opts}, {opts2})

    Similarly to macaltkey.keymap.set, this wraps vim.api.nvim_set_keymap.
    {opts2} is for macaltkey-specific options.

                                             *macaltkey.nvim_buf_set_keymap()*
macaltkey.nvim_buf_set_keymap ({buf}, {mode}, {lhs}, {rhs}, {opts}, {opts2})

    Similarly to macaltkey.keymap.set, this wraps the built-in function 
    vim.api.nvim_buf_set_keymap. {opts2} is for macaltkey-specific options.

                                                 *macaltkey.nvim_del_keymap()*
macaltkey.nvim_del_keymap ({mode}, {lhs}, {opts})

    Similarly to macaltkey.keymap.set, this wraps vim.api.nvim_del_keymap.
    {opts} is for macaltkey-specific options.

                                             *macaltkey.nvim_buf_del_keymap()*
macaltkey.nvim_set_keymap ({buf}, {mode}, {lhs}, {opts}, )

    Similarly to macaltkey.keymap.set, this wraps the built-in function 
    vim.api.nvim_buf_del_keymap. {opts} is for macaltkey-specific options.



It is possible to define your own dicts but non-ascii characters may need special
code in mak.convert (see the implementation for "en-GB", which has to treat £ as
two characters '\194\163'; contributions welcome for other layouts.) 

================================================================================
			     acknowledgements
Inspiration from 
	'Neovim Lua Plugin From Scratch' by TJ DeVries and bashbunni 
	(https://www.youtube.com/watch?v=n4Lp4cV8YR0)
	and 'Create Neovim Plugins with Lua' by DevOnDuty
	(https://www.youtube.com/watch?v=wkxtHV1hzEY)

The get_os function is from f-person/auto-dark-mode.nvim.


vim:tw=78:ts=8:ft=help:norl:
